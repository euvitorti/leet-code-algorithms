Overview
The code defines a class named RandomLeet, which is designed to randomly select an index from a given array of weights with a probability proportional to the weights. The goal is to ensure that indices with higher weights are more likely to be selected compared to those with lower weights.

Class Components
Class Variables:

arrayLength: This holds the original weights provided during the initialization of the object.
arrayPrefixos: This array is used to store the cumulative sums of the weights, which helps in determining the probability distribution for selecting an index.
sum: This variable stores the total sum of all weights, which is used to generate a random number for selection.
random: An instance of the Random class used to generate random numbers.
Constructor:

The constructor RandomLeet(int[] w) initializes the object with an array of weights (w). It assigns the weights to arrayLength, initializes arrayPrefixos, and calls the allWeigth() method to compute the cumulative sums of the weights.
Method allWeigth():

This method calculates the prefix sums based on the weights. It iterates through arrayLength, updates the total sum, and fills the arrayPrefixos with the cumulative sums of weights. Each entry in arrayPrefixos at index i represents the sum of weights from index 0 to i.
Method pickIndex():

This method is responsible for selecting a random index based on the weights. It first checks if the total sum is less than or equal to zero (though this should not occur with valid input).
A random number is generated between 0 and the total sum of weights (exclusive).
The method then uses binary search to find the appropriate index corresponding to the generated random number. It looks for the smallest index in arrayPrefixos where the value is greater than the random number.
Finally, it returns this index, ensuring that the index is selected with a probability proportional to its weight.
Main Method:

The main method serves as a test for the RandomLeet class. It creates an instance of the class with a sample weights array ({1, 3}) and calls pickIndex(), printing the result. This demonstrates how the class functions and outputs the randomly chosen index.
Example of Functionality
Given the weights array [1, 3], the cumulative sums would be [1, 4]. This means:
The probability of selecting index 0 is 1 / 4 = 25%.
The probability of selecting index 1 is 3 / 4 = 75%.
When pickIndex() is called multiple times, it will return index 1 most of the time, reflecting the weights assigned.

Conclusion
The overall functionality of the code is to provide a way to randomly pick an index from an array with weighted probabilities, making it particularly useful for scenarios where certain choices should be favored over others based on predefined criteria.